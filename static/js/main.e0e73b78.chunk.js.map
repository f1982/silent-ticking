{"version":3,"sources":["components/Countdown.tsx","components/SettingCommon.tsx","types/types.ts","theme/GlobalStyles.ts","theme/CustomThemeProvider.tsx","components/ThemeSelector.tsx","pages/clock/ClockSettings.tsx","utils/styledBreakpoints.js","components/Clock.tsx","components/DateDisplay.tsx","pages/clock/index.tsx","pages/pomodoro/index.tsx","config.ts","pages/pomodoro/PomodoroSettings.tsx","pages/main/Main.tsx","App.tsx","reportWebVitals.ts","theme/typography.ts","theme/themes.ts","index.tsx"],"names":["CountdownStyles","SettingCommon","children","Box","display","flex","p","flexDirection","alignItems","justifyContent","Typography","variant","style","lineHeight","component","IconButton","color","fontSize","mt","Button","fullWidth","href","size","startIcon","mb","DefaultUserSettings","timeFormat","showSecond","showDate","theme","fontFamily","blinkSeparator","GlobalStyle","createGlobalStyle","styledNormalize","CustomThemeContext","React","createContext","CustomThemeProvider","themes","currentTheme","localStorage","getItem","useState","themeName","_setThemeName","createMuiTheme","contextValue","setTheme","name","setItem","Provider","value","CssBaseline","ThemeSelector","context","useContext","FormControlLabel","control","Switch","title","checked","onChange","width","labelPlacement","label","SettingRow","styled","ClockSettings","settings","onSettingUpdate","setTimeFormat","setShowSecond","setShowDate","useEffect","RadioGroup","aria-label","event","target","Radio","Divider","evt","breakpoints","cssProp","cssPropUnits","values","mediaQueryType","breakpointProps","reduce","mediaQueries","Object","keys","screenBreakpoint","cssPropBreakpoint","css","dayTime","moment","format","SeparatorContainer","span","TimeSegment","1200","600","ColonSegment","Clock","hourFormat","tickHandler","time","setTime","count","setCount","updateInterval","segments","tz","Intl","DateTimeFormat","resolvedOptions","timeZone","split","timer","setInterval","clearInterval","map","segment","index","Fragment","key","Wrapper","div","DateDisplay","date","Date","textAlign","pl","CountdownWrapper","ProgressWrapper","IconContainer","pad","num","slice","Countdown","blink","onTimeUp","currentTime","setCurrentTime","interval","seconds","getDigitalMode","current","total","secs","minutes","Math","floor","hhmmss","LinearProgress","height","CircularProgress","margin","getCircleMode","getCountdown","CountdownStyleList","DIGITAL","CIRCLE","PROGRESS","Pomodoro","styleIndex","setStyleIndex","countTime","setCountTime","alert","onClick","length","pomodoroSessions","StyledFieldLabel","TextField","PomodoroSetting","session","setSession","id","select","helperText","option","MenuItem","defaultValue","InputProps","startAdornment","InputAdornment","position","Container","props","palette","background","default","TopToolBar","ToolButton","Main","fullscreenHandler","openDraw","setOpenDraw","setCurrent","userSettings","setUserSettings","maxWidth","flag","active","exit","enter","getMenuButton","Drawer","open","anchor","onClose","setting","PomodoroSettings","Full","FullScreen","App","handle","useFullScreenHandle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","typography","createTypography","createPalette","join","button","h1","h2","h3","h4","h5","h6","body1","subtitle1","subtitle2","caption","pxToRem","createBreakpoints","overrideTypography","up","darkObj","dark","overrides","MuiTypography","light","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0e73b78.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { breakpoints } from '../utils/styledBreakpoints'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Box from '@material-ui/core/Box'\n\nconst intervalDuration = 1000\n\nexport enum CountdownStyles {\n  PROGRESS = 'progress',\n  CIRCLE = 'circle',\n  DIGITAL = 'digital'\n}\nconst CountdownWrapper = styled.div``\nconst Wrapper = styled.div`\n  position: relative;\n  text-align: center;\n`\n\nconst ProgressWrapper = styled.div`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n`\nconst SeparatorContainer = styled.span`\n  display: inline-block;\n`\n\nconst TimeSegment = styled.span`\n  font-size: 8.1rem;\n  min-width: 11rem;\n  display: inline-block;\n  text-align: left;\n  ${breakpoints('font-size', 'rem', [{ 1200: 7.2 }, { 600: 3.0 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 9.6 }, { 600: 4.5 }])};\n`\n\nconst ColonSegment = styled.span`\n  font-size: 5.4rem;\n  min-width: 3rem;\n  display: inline-block;\n  text-align: center;\n  ${breakpoints('font-size', 'rem', [{ 1200: 3.9 }, { 600: 2 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 0.5 }, { 600: 0.5 }])};\n`\n\nconst IconContainer = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`\n\nfunction pad(num: number) {\n  return ('0' + num).slice(-2)\n}\n\nfunction hhmmss(secs: number) {\n  const minutes = Math.floor(secs / 60)\n  secs = secs % 60\n  // const hours = Math.floor(minutes / 60)\n  // minutes = minutes % 60\n  return `${pad(minutes)}:${pad(secs)}`\n  // return `${pad(hours)}:${pad(minutes)}:${pad(secs)}`\n}\n\nexport interface CountdownProps {\n  time: number\n  format: 'digital' | 'progress' | 'circle'\n  blink?: boolean\n  children?: React.ReactNode\n  onTimeUp?: () => void\n}\n\nconst Countdown: React.FC<CountdownProps> = ({\n  time = 25 * 60,\n  format = 'digital',\n  blink = true,\n  children = null,\n  onTimeUp\n}) => {\n  const [currentTime, setCurrentTime] = useState<number>(0)\n\n  useEffect(() => {\n    setCurrentTime(time)\n    const interval = setInterval(() => {\n      setCurrentTime((seconds: number) => {\n        if (seconds > 1) {\n          return seconds - 1\n        } else {\n          clearInterval(interval)\n          if (onTimeUp && time > 0) onTimeUp()\n          return 0\n        }\n      })\n    }, intervalDuration)\n    return () => clearInterval(interval)\n  }, [time, onTimeUp])\n\n  const getSeparator = () => {\n    if (!blink) {\n      return <ColonSegment>:</ColonSegment>\n    } else {\n      if (currentTime % 2 === 0) {\n        return <ColonSegment>&nbsp;</ColonSegment>\n      } else {\n        return <ColonSegment>:</ColonSegment>\n      }\n    }\n  }\n\n  const getDigitalMode = (current: number, total: number) => {\n    return (\n      <div>\n        {hhmmss(current)\n          .split(':')\n          .map((segment: string, index: number) => {\n            return (\n              <React.Fragment key={index}>\n                {index !== 0 && (\n                  <SeparatorContainer>{getSeparator()}</SeparatorContainer>\n                )}\n                <TimeSegment>{segment}</TimeSegment>\n              </React.Fragment>\n            )\n          })}\n      </div>\n    )\n  }\n\n  const getCircleMode = (current: number, total: number) => {\n    return (\n      <Wrapper>\n        <CircularProgress\n          style={{ margin: `0 auto` }}\n          variant='determinate'\n          size={234}\n          value={(total - current / total) * 100}\n        />\n        {children && <IconContainer>{children}</IconContainer>}\n      </Wrapper>\n    )\n  }\n\n  const getProgressMode = (current: number, total: number) => {\n    return (\n      <ProgressWrapper>\n        <LinearProgress\n          style={{ width: '100%', height: '3rem' }}\n          variant='determinate'\n          color='secondary'\n          value={(1 - current / total) * 100}\n        />\n        {children && (\n          <Box display='flex' mt={2} justifyContent='center'>\n            {children}\n          </Box>\n        )}\n      </ProgressWrapper>\n    )\n  }\n\n  const getCountdown = (format: string) => {\n    switch (format) {\n      case 'digital':\n        return getDigitalMode(currentTime, time)\n      case 'progress':\n        return getProgressMode(currentTime, time)\n      default:\n        return getCircleMode(currentTime, time)\n    }\n  }\n\n  return <CountdownWrapper>{getCountdown(format)}</CountdownWrapper>\n}\n\nexport default Countdown\n","import Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport LocalCafeIcon from '@material-ui/icons/LocalCafe'\nimport React from 'react'\n\ninterface SettingCommonProps {\n  children: React.ReactNode\n}\n\nconst SettingCommon: React.FC<SettingCommonProps> = ({ children }) => {\n  return (\n    <Box display='flex' flex={1} p={5} flexDirection='column'>\n      <Box>\n        <Box\n          display='flex'\n          flexDirection='row'\n          alignItems='center'\n          justifyContent='space-between'>\n          <Typography\n            variant='h5'\n            style={{ lineHeight: '48px' }}\n            component='h1'>\n            Silent Ticking\n          </Typography>\n          <Box flex={1} />\n          <IconButton>\n            <CloseIcon color='primary' fontSize='default' />\n          </IconButton>\n        </Box>\n      </Box>\n      <Box mt={5} />\n      {children}\n      <Box flex={1} />\n      <Box mt={3}>\n        <Box display='flex' flexDirection='row'>\n          <Box display='flex' flexDirection='column'>\n            <Typography>Designer</Typography>\n            <Typography>Jerry</Typography>\n          </Box>\n          <Box flex={1} />\n          <Box display='flex' flexDirection='column'>\n            <Typography>Developer</Typography>\n            <Typography>Andy</Typography>\n          </Box>\n        </Box>\n      </Box>\n      <Box mt={3}>\n        <Button\n          fullWidth\n          variant='outlined'\n          href='https://www.buymeacoffee.com/jerryandy'\n          size='small'\n          startIcon={<LocalCafeIcon />}\n          color='primary'>\n          Buy me a Coffee\n        </Button>\n      </Box>\n      <Box mt={3} mb={5}>\n        <Typography>Copyright 2020</Typography>\n      </Box>\n    </Box>\n  )\n}\n\nexport default SettingCommon\n","export interface SystemSettings {\n  appName: string\n  appDescription: string\n  appVersion: string\n}\n\nexport type TimeFormat = '12h' | '24h'\nexport type STTheme = 'dark' | 'light'\n\nexport interface UserSettings {\n  timeFormat: TimeFormat\n  showSecond: boolean\n  showDate: boolean\n  theme: STTheme\n  fontFamily: string\n  blinkSeparator: boolean\n}\n\nexport interface PomodoroSession {\n  sessionName: string\n  time: number\n}\n\nexport interface UserPomodoroSettings {\n  sessionName: string\n  display: 'progress' | 'circle' | 'digital'\n  sessionDuration: number\n  break: number\n  sharing: number\n}\n\nexport const DefaultUserSettings: UserSettings = {\n  timeFormat: '24h',\n  showSecond: true,\n  showDate: true,\n  theme: 'dark',\n  fontFamily: `'Major Mono Display', monospace`,\n  // fontFamily: 'Roboto',\n  // fontFamily: 'Montserrat',\n  blinkSeparator: true\n}\n","import { createGlobalStyle } from 'styled-components'\nimport styledNormalize from 'styled-normalize'\n\nconst GlobalStyle = createGlobalStyle`\n  ${styledNormalize}\n\n  body {\n    display: flex;\n    height: 100vh;\n  }\n  #root {\n    flex:1;\n  }\n`\nexport default GlobalStyle\n","import React, { useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\nimport GlobalStyle from './GlobalStyles'\n// eslint-disable-next-line no-unused-vars\n\ninterface ThemeContext {\n  currentTheme: string\n  setTheme: (themeName: string) => void\n}\nexport const CustomThemeContext = React.createContext<ThemeContext | null>(null)\n\ninterface CustomThemeProviderProps {\n  children: React.ReactNode\n  themes: any\n}\n\nconst CustomThemeProvider: React.FC<CustomThemeProviderProps> = ({\n  children,\n  themes\n}) => {\n  // Read current theme from localStorage or maybe from an api\n  const currentTheme = localStorage.getItem('appTheme') || 'dark'\n\n  // State to hold the selected theme name\n  const [themeName, _setThemeName] = useState(currentTheme)\n\n  // Retrieve the theme object by theme name\n  const theme = createMuiTheme(themes[themeName])\n\n  // Wrap _setThemeName to store new theme names in localStorage\n  const setThemeName = (name: string) => {\n    localStorage.setItem('appTheme', name)\n    _setThemeName(name)\n  }\n\n  const contextValue = {\n    currentTheme: themeName,\n    setTheme: setThemeName\n  }\n\n  return (\n    <CustomThemeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          {children}\n          <GlobalStyle />\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </CustomThemeContext.Provider>\n  )\n}\n\nexport default CustomThemeProvider\n","import FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport React, { useContext } from 'react'\nimport { CustomThemeContext } from '../theme/CustomThemeProvider'\n\nconst ThemeSelector = () => {\n  const context = useContext(CustomThemeContext)\n  if (context) {\n    const { currentTheme, setTheme } = context\n\n    const handleThemeChange = () => {\n      setTheme(currentTheme === 'light' ? 'dark' : 'light')\n    }\n\n    return (\n      <>\n        <FormControlLabel\n          control={\n            <Switch\n              title={currentTheme}\n              checked={currentTheme === 'dark'}\n              onChange={handleThemeChange}\n            />\n          }\n          style={{ width: `100%` }}\n          labelPlacement='end'\n          label={currentTheme}\n        />\n      </>\n    )\n  }\n  return null\n}\n\nexport default ThemeSelector\n","import Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport { DrawerProps } from '@material-ui/core/Drawer'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Switch from '@material-ui/core/Switch'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport ThemeSelector from '../../components/ThemeSelector'\nimport { DefaultUserSettings, UserSettings } from '../../types/types'\n\nconst SettingRow = styled(Box)`\n  padding: 10px 0 10px 0;\n`\ninterface ClockSettingsProps extends DrawerProps {\n  settings?: UserSettings\n  onSettingUpdate: (setting: Object) => void\n}\n\nconst ClockSettings: React.FC<ClockSettingsProps> = ({\n  settings = DefaultUserSettings,\n  onSettingUpdate,\n  ...rest\n}) => {\n  const [timeFormat, setTimeFormat] = useState('24h')\n  const [showSecond, setShowSecond] = useState(true)\n  const [showDate, setShowDate] = useState(true)\n\n  useEffect(() => {\n    setTimeFormat(settings.timeFormat)\n    setShowSecond(settings.showSecond)\n  }, [settings])\n\n  const handleTimeFormatChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = (event.target as HTMLInputElement).value\n    setTimeFormat(value)\n    if (onSettingUpdate) onSettingUpdate({ timeFormat: value })\n  }\n\n  const handleShowSecondChange = (\n    evt: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    setShowSecond(checked)\n    if (onSettingUpdate) onSettingUpdate({ showSecond: checked })\n  }\n\n  const handleShowDateChange = (\n    evt: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    setShowDate(checked)\n    if (onSettingUpdate) onSettingUpdate({ showDate: checked })\n  }\n\n  return (\n    <>\n      <SettingRow>\n        <RadioGroup\n          aria-label='hour-format'\n          name='hour-format'\n          value={timeFormat}\n          onChange={handleTimeFormatChange}>\n          <Box display='flex'>\n            <FormControlLabel value='12h' control={<Radio />} label='12H' />\n            <Box flex={1} />\n            <FormControlLabel value='24h' control={<Radio />} label='24H' />\n          </Box>\n        </RadioGroup>\n      </SettingRow>\n      <Divider />\n\n      <SettingRow>\n        <FormControlLabel\n          control={\n            <Switch\n              title='second'\n              checked={showSecond}\n              onChange={handleShowSecondChange}\n            />\n          }\n          style={{ width: `100%` }}\n          labelPlacement='end'\n          label='Show Second'\n        />\n      </SettingRow>\n      <Divider />\n\n      <SettingRow>\n        <FormControlLabel\n          control={\n            <Switch\n              title='second'\n              checked={showDate}\n              onChange={handleShowDateChange}\n            />\n          }\n          style={{ width: `100%` }}\n          labelPlacement='end'\n          label='Show Date'\n        />\n      </SettingRow>\n      <Divider />\n\n      <SettingRow>\n        <ThemeSelector />\n      </SettingRow>\n      <Divider />\n    </>\n  )\n}\n\nexport default ClockSettings\n","import { css } from 'styled-components'\n\nexport const breakpoints = (\n  cssProp = 'padding', // the CSS property to apply to the breakpoints\n  cssPropUnits = 'px', // the units of the CSS property (can set equal to \"\" and apply units to values directly)\n  values = [], // array of objects, e.g. [{ 800: 60 }, ...] <-- 800 (key) = screen breakpoint, 60 (value) = CSS prop breakpoint\n  mediaQueryType = 'max-width' // media query breakpoint type, i.e.: max-width, min-width, max-height, min-height\n) => {\n  const breakpointProps = values.reduce((mediaQueries, value) => {\n    const [screenBreakpoint, cssPropBreakpoint] = [\n      Object.keys(value)[0],\n      Object.values(value)[0]\n    ]\n    return (mediaQueries += `\n    @media screen and (${mediaQueryType}: ${screenBreakpoint}px) {\n      ${cssProp}: ${cssPropBreakpoint}${cssPropUnits};\n    }\n    `)\n  }, '')\n  return css([breakpointProps])\n}\n","import moment from 'moment'\nimport 'moment-timezone'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { breakpoints } from '../utils/styledBreakpoints'\n\nconst DebugMode = false\nconst intervalDuration = 1000\nconst dayTime = moment().format('A')\n\nconst getTimezone = () => {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone as string\n}\n\nconst SeparatorContainer = styled.span`\n  display: inline-block;\n`\n\nexport const TimeSegment = styled.span`\n  font-size: 8.1rem;\n  min-width: 11rem;\n  display: inline-block;\n  text-align: left;\n  ${breakpoints('font-size', 'rem', [{ 1200: 7.2 }, { 600: 3.0 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 9.6 }, { 600: 4.5 }])};\n`\n\nexport const ColonSegment = styled.span`\n  font-size: 5.4rem;\n  min-width: 3rem;\n  display: inline-block;\n  text-align: center;\n  ${breakpoints('font-size', 'rem', [{ 1200: 3.9 }, { 600: 2 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 0.5 }, { 600: 0.5 }])};\n`\n\ninterface ClockProps {\n  hourFormat?: '12h' | '24h'\n  showSecond: boolean\n  family?: string\n  blinkSeparator?: boolean\n  tickHandler?: (second: number) => void | null\n}\n\nconst Clock: React.FC<ClockProps> = ({\n  hourFormat = '12h',\n  showSecond,\n  blinkSeparator = true,\n  tickHandler = null\n}) => {\n  const [time, setTime] = useState<string[]>([])\n  const [count, setCount] = useState(0)\n\n  const getFormat = () => {\n    const hourString = hourFormat === '12h' ? 'hh:mm' : 'kk:mm'\n    const secString = showSecond === true ? ':ss' : ''\n    return hourString + secString\n  }\n\n  useEffect(() => {\n    const updateInterval = () => {\n      const format = getFormat()\n      const timeString = moment().tz(getTimezone()).format(format)\n      const segments = timeString.split(':')\n      setTime(segments)\n      // count\n      setCount(value => value + 1)\n      if (tickHandler) tickHandler(count)\n    }\n    // display\n    updateInterval()\n    // update\n    const timer = setInterval(() => {\n      updateInterval()\n    }, intervalDuration)\n    return () => clearInterval(timer)\n    // eslint-disable-next-line\n  }, [showSecond, hourFormat])\n\n  const getSeparator = () => {\n    if (!blinkSeparator) {\n      return <ColonSegment>:</ColonSegment>\n    } else {\n      if (count % 2 === 0) {\n        return <ColonSegment>&nbsp;</ColonSegment>\n      } else {\n        return <ColonSegment>:</ColonSegment>\n      }\n    }\n  }\n\n  return (\n    <div>\n      {time.map((segment, index) => {\n        return (\n          <React.Fragment key={index}>\n            {index !== 0 && (\n              <SeparatorContainer>{getSeparator()}</SeparatorContainer>\n            )}\n            <TimeSegment>{segment}</TimeSegment>\n          </React.Fragment>\n        )\n      })}\n      {hourFormat === '12h' && <span>{dayTime}</span>}\n      {DebugMode && <div>count: {count}</div>}\n    </div>\n  )\n}\n\nexport default Clock\n","import React from 'react'\nimport styled from 'styled-components'\nimport Moment from 'react-moment'\nimport { breakpoints } from '../utils/styledBreakpoints'\n\nconst Wrapper = styled.div`\n  font-size: 1.8rem;\n  min-width: 11rem;\n  display: inline-block;\n  text-align: left;\n  ${breakpoints('font-size', 'rem', [{ 1200: 1.2 }, { 600: 0.9 }])};\n`\ninterface DateDisplayProps {\n  format?: string\n}\nconst DateDisplay: React.FC<DateDisplayProps> = ({ format = 'DD/MM/YYYY' }) => {\n  const date = new Date()\n  return (\n    <Wrapper>\n      <Moment format={format}>{date}</Moment>\n    </Wrapper>\n  )\n}\n\nexport default DateDisplay\n","import Box from '@material-ui/core/Box'\nimport React from 'react'\nimport styled from 'styled-components'\nimport ClockKK from '../../components/Clock'\nimport DateDisplay from '../../components/DateDisplay'\nimport { DefaultUserSettings, UserSettings } from '../../types/types'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`\n\ninterface ClockProps {\n  settings?: UserSettings\n}\n\nconst Clock: React.FC<ClockProps> = ({ settings = DefaultUserSettings }) => {\n  return (\n    <Wrapper>\n      <Box textAlign='left' pl={2}>\n        {settings.showDate && <DateDisplay />}\n      </Box>\n      <ClockKK\n        hourFormat={settings.timeFormat}\n        showSecond={settings.showSecond}\n        blinkSeparator={settings.blinkSeparator}\n      />\n    </Wrapper>\n  )\n}\n\nexport default Clock\n","import { Button } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\nimport IconButton from '@material-ui/core/IconButton'\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun'\nimport RepeatIcon from '@material-ui/icons/Repeat'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Countdown, { CountdownStyles } from '../../components/Countdown'\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`\n\ninterface PomodoroProps {}\n\nconst CountdownStyleList = [\n  CountdownStyles.DIGITAL,\n  CountdownStyles.CIRCLE,\n  CountdownStyles.PROGRESS\n]\n\nconst Pomodoro: React.FC<PomodoroProps> = () => {\n  const [styleIndex, setStyleIndex] = useState(0)\n  const [countTime, setCountTime] = useState(0)\n\n  return (\n    <Wrapper>\n      <Countdown\n        format={CountdownStyleList[styleIndex]}\n        onTimeUp={() => {\n          alert('you finished a pomodoro time, congratulations!')\n        }}\n        time={countTime}>\n        <DirectionsRunIcon fontSize='large' />\n      </Countdown>\n      <IconButton\n        onClick={() => {\n          setStyleIndex(index =>\n            index < CountdownStyleList.length - 1 ? (index += 1) : (index = 0)\n          )\n        }}>\n        <RepeatIcon color='secondary' fontSize='large' />\n      </IconButton>\n      <Box display='flex' flexDirection='row'>\n        <Button\n          onClick={() => {\n            setCountTime(25 * 60)\n          }}>\n          25m\n        </Button>\n        <Button\n          onClick={() => {\n            setCountTime(10)\n          }}>\n          10s\n        </Button>\n      </Box>\n    </Wrapper>\n  )\n}\n\nexport default Pomodoro\n","export const AppInfo = {\n  desinger: 'Jerry',\n  developer: 'Andy',\n  version: '0.1'\n}\n\nexport const pomodoroSessions = [\n  {\n    value: '25',\n    label: 'Focus session'\n  },\n  {\n    value: '5',\n    label: 'Short break'\n  },\n  {\n    value: '25',\n    label: 'Exercise session'\n  },\n  {\n    value: '10',\n    label: 'Coffee break'\n  }\n]\n","import Box from '@material-ui/core/Box'\nimport { DrawerProps } from '@material-ui/core/Drawer'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { pomodoroSessions } from '../../config'\n\nconst SettingRow = styled(Box)`\n  padding: 10px 0 10px 0;\n`\n\nconst StyledFieldLabel = styled(TextField)`\n  .MuiOutlinedInput-notchedOutline {\n    border: 1px solid #636363;\n  }\n`\n\ninterface RightDrawerProps extends DrawerProps {}\n\nconst PomodoroSetting: React.FC<RightDrawerProps> = () => {\n  const [session, setSession] = useState('')\n\n  const handleSessionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = (event.target as HTMLInputElement).value\n    setSession(value)\n  }\n\n  return (\n    <Box display='flex' height='100%' flexDirection='column'>\n      <SettingRow>\n        <StyledFieldLabel\n          fullWidth\n          label='Session name'\n          id='session-name'\n          value={session}\n          select\n          onChange={handleSessionChange}\n          helperText='Select session type'>\n          {pomodoroSessions.map(option => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </StyledFieldLabel>\n      </SettingRow>\n      <SettingRow>\n        <StyledFieldLabel\n          label='Session during'\n          id='session-during'\n          defaultValue='25'\n          helperText='set a duration for the session'\n          InputProps={{\n            startAdornment: <InputAdornment position='end'>min</InputAdornment>\n          }}\n          margin='normal'\n          variant='outlined'\n        />\n      </SettingRow>\n      <SettingRow>\n        <StyledFieldLabel\n          label='Break'\n          id='break-time'\n          defaultValue='5'\n          helperText='set a break time'\n          InputProps={{\n            startAdornment: <InputAdornment position='end'>min</InputAdornment>\n          }}\n          margin='normal'\n          variant='outlined'\n        />\n      </SettingRow>\n      <SettingRow>\n        <StyledFieldLabel\n          label='Sharing'\n          id='sharing-time'\n          defaultValue='5'\n          helperText='set a sharing time'\n          InputProps={{\n            startAdornment: <InputAdornment position='end'>min</InputAdornment>\n          }}\n          margin='normal'\n          variant='outlined'\n        />\n      </SettingRow>\n    </Box>\n  )\n}\n\nexport default PomodoroSetting\n","import Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\nimport Drawer from '@material-ui/core/Drawer'\nimport IconButton from '@material-ui/core/IconButton'\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder'\nimport TimerIcon from '@material-ui/icons/Timer'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport SettingCommon from '../../components/SettingCommon'\nimport { DefaultUserSettings, UserSettings } from '../../types/types'\nimport ClockSettings from '../clock/ClockSettings'\nimport ClockPage from '../clock/index'\nimport Pomodoro from '../pomodoro/index'\nimport PomodoroSettings from '../pomodoro/PomodoroSettings'\n\nconst Wrapper = styled(Container)`\n  display: flex;\n  background-color: ${props => props.theme.palette.background.default};\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`\n\nconst TopToolBar = styled.div`\n  width: 100%;\n  height: 20%;\n  top: 0;\n  position: absolute;\n  padding: 3rem;\n  display: flex;\n  flex-direction: row;\n`\n\nconst ToolButton = styled(IconButton)`\n  width: 42px;\n  height: 42px;\n  margin-left: 1.5rem;\n`\n\ninterface MainProps {\n  fullscreenHandler: any\n}\n\nconst Main: React.FC<MainProps> = ({ fullscreenHandler }) => {\n  const [openDraw, setOpenDraw] = useState(false)\n  const [current, setCurrent] = useState('clock')\n  const [userSettings, setUserSettings] = useState<UserSettings>(\n    DefaultUserSettings\n  )\n\n  const handleSettingUpdate = (setting: object) => {\n    // update specific option of setting\n    setUserSettings(DefaultUserSettings)\n  }\n\n  const getMenuButton = () => {\n    if (!fullscreenHandler.active) {\n      return (\n        <ToolButton\n          onClick={() => {\n            setOpenDraw(true)\n          }}>\n          <MenuIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    }\n  }\n\n  const getShiftButton = () => {\n    return (\n      <ToolButton\n        onClick={() => {\n          setCurrent(flag => (flag === 'clock' ? 'pomodoro' : 'clock'))\n        }}>\n        {current === 'clock' ? (\n          <QueryBuilderIcon color='primary' fontSize='large' />\n        ) : (\n          <TimerIcon color='primary' fontSize='large' />\n        )}\n      </ToolButton>\n    )\n  }\n\n  const getFullscreenButton = () => {\n    if (fullscreenHandler.active) {\n      return (\n        <ToolButton onClick={fullscreenHandler.exit}>\n          <FullscreenExitIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    } else {\n      return (\n        <ToolButton onClick={fullscreenHandler.enter}>\n          <FullscreenIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    }\n  }\n\n  return (\n    <Wrapper maxWidth={false}>\n      <TopToolBar>\n        {getShiftButton()}\n        <Box flex={1} />\n        {getFullscreenButton()}\n        {getMenuButton()}\n      </TopToolBar>\n\n      <Box p={3} style={{ fontFamily: userSettings.fontFamily }}>\n        {current === 'clock' ? <ClockPage /> : <Pomodoro />}\n      </Box>\n\n      <Drawer\n        open={openDraw}\n        anchor='right'\n        onClose={() => {\n          setOpenDraw(false)\n        }}>\n        <SettingCommon>\n          {current === 'clock' ? (\n            <ClockSettings onSettingUpdate={handleSettingUpdate} />\n          ) : (\n            <PomodoroSettings />\n          )}\n        </SettingCommon>\n      </Drawer>\n    </Wrapper>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport styled from 'styled-components'\nimport Main from './pages/main/Main'\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen'\n\nconst Full = styled(FullScreen)`\n  width: 100%;\n  height: 100%;\n`\nfunction App() {\n  const handle = useFullScreenHandle()\n  return (\n    <>\n      <Full handle={handle}>\n        <Main fullscreenHandler={handle} />\n      </Full>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import createBreakpoints from '@material-ui/core/styles/createBreakpoints'\nimport createPalette from '@material-ui/core/styles/createPalette'\nimport createTypography from '@material-ui/core/styles/createTypography'\n\nexport const typography = createTypography(createPalette({}), {\n  fontFamily: [\n    'Montserrat',\n    '-apple-system',\n    'BlinkMacSystemFont',\n    '\"Segoe UI\"',\n    '\"Helvetica Neue\"',\n    'Arial',\n    'sans-serif'\n  ].join(','),\n  button: {\n    fontSize: '1.2rem'\n  },\n  h1: {\n    fontSize: '5.4rem'\n  },\n  h2: {\n    fontSize: '3.6rem'\n  },\n  h3: {\n    fontSize: '2.7rem'\n  },\n  h4: {\n    fontSize: '2.1rem'\n  },\n  h5: {\n    textAlign: 'left',\n    fontSize: '1.5rem'\n  },\n  h6: {\n    fontSize: '1.2rem'\n  },\n  body1: {\n    fontSize: '1rem'\n  },\n  subtitle1: {\n    fontSize: '0.9rem'\n  },\n  subtitle2: {\n    fontSize: '0.8rem'\n  },\n  caption: {\n    fontSize: '0.6rem'\n  }\n})\n\nfunction pxToRem(value: number) {\n  return `${value / 16}rem`\n}\n\n// Generate breakpoints so we can use them in the theme definition\nconst breakpoints = createBreakpoints({})\n\nexport const overrideTypography = {\n  h1: {\n    fontSize: pxToRem(52), // < md\n    [breakpoints.up('sm')]: {\n      fontSize: pxToRem(78) // >md\n    },\n    [breakpoints.up('md')]: {\n      fontSize: pxToRem(120) // >md\n    }\n  },\n  h3: {\n    fontSize: pxToRem(15),\n    [breakpoints.up('md')]: {\n      fontSize: pxToRem(18)\n    }\n  }\n}\n","import dark from './dark.json'\nimport light from './light.json'\nimport { overrideTypography, typography } from './typography'\n\nconst darkObj = {\n  ...dark,\n  typography,\n  overrides: {\n    MuiTypography: overrideTypography\n  }\n}\n\nconst lightObj = {\n  ...light,\n  typography,\n  overrides: {\n    MuiTypography: overrideTypography\n  }\n}\n\nexport const themes = { light: lightObj, dark: darkObj }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport CustomThemeProvider from './theme/CustomThemeProvider'\n\nimport { themes } from './theme/themes'\n\nReactDOM.render(\n  <CustomThemeProvider themes={themes}>\n    <App />\n  </CustomThemeProvider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}