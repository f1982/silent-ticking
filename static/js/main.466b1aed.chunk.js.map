{"version":3,"sources":["utils/styledBreakpoints.js","components/Clock.tsx","theme/GlobalStyles.ts","theme/CustomThemeProvider.tsx","pages/main/ThemeSelector.tsx","pages/main/RightDrawer.tsx","components/DateDisplay.tsx","types/settings.ts","pages/main/Main.tsx","App.tsx","reportWebVitals.ts","theme/typography.ts","theme/themes.ts","index.tsx"],"names":["breakpoints","cssProp","cssPropUnits","values","mediaQueryType","breakpointProps","reduce","mediaQueries","value","Object","keys","screenBreakpoint","cssPropBreakpoint","css","dayTime","moment","format","SeparatorContainer","styled","span","TimeSegment","1200","600","ColonSegment","Clock","hourFormat","showSecond","blinkSeparator","digital","separator","tickHandler","useState","time","setTime","count","setCount","useEffect","updateInterval","segments","tz","Intl","DateTimeFormat","resolvedOptions","timeZone","split","timer","setInterval","clearInterval","map","segment","index","Fragment","key","GlobalStyle","createGlobalStyle","styledNormalize","CustomThemeContext","React","createContext","CustomThemeProvider","children","themes","currentTheme","localStorage","getItem","themeName","_setThemeName","theme","createMuiTheme","contextValue","setTheme","name","setItem","Provider","CssBaseline","ThemeSelector","context","useContext","Box","FormControlLabel","control","Switch","title","checked","onChange","label","ml","display","alignItems","RightDrawer","onClose","settings","onSettingUpdate","rest","timeFormat","setTimeFormat","setShowSecond","showDate","setShowDate","Drawer","anchor","p","height","flexDirection","pl","pr","pt","width","justifyContent","Typography","IconButton","onClick","color","fontSize","RadioGroup","aria-label","event","target","Radio","Divider","evt","flex","Wrapper","div","DateDisplay","date","Date","DefaultUserSettings","fontFamily","Container","props","palette","background","default","TopToolBar","ToolButton","Main","fullscreenHandler","openDraw","setOpenDraw","userSettings","setUserSettings","maxWidth","active","getMenuButton","exit","enter","style","textAlign","open","setting","newSettings","Full","FullScreen","App","handle","useFullScreenHandle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","typography","createTypography","createPalette","join","button","h1","h2","h3","h4","h5","h6","body1","subtitle1","subtitle2","caption","pxToRem","createBreakpoints","overrideTypography","up","darkObj","dark","overrides","MuiTypography","light","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.466b1aed.chunk.js","sourcesContent":["import { css } from 'styled-components'\n\nexport const breakpoints = (\n  cssProp = 'padding', // the CSS property to apply to the breakpoints\n  cssPropUnits = 'px', // the units of the CSS property (can set equal to \"\" and apply units to values directly)\n  values = [], // array of objects, e.g. [{ 800: 60 }, ...] <-- 800 (key) = screen breakpoint, 60 (value) = CSS prop breakpoint\n  mediaQueryType = 'max-width' // media query breakpoint type, i.e.: max-width, min-width, max-height, min-height\n) => {\n  const breakpointProps = values.reduce((mediaQueries, value) => {\n    const [screenBreakpoint, cssPropBreakpoint] = [\n      Object.keys(value)[0],\n      Object.values(value)[0]\n    ]\n    return (mediaQueries += `\n    @media screen and (${mediaQueryType}: ${screenBreakpoint}px) {\n      ${cssProp}: ${cssPropBreakpoint}${cssPropUnits};\n    }\n    `)\n  }, '')\n  return css([breakpointProps])\n}\n","import React, { useState, useEffect, ReactNode, ReactElement } from 'react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport 'moment-timezone'\nimport { breakpoints } from '../utils/styledBreakpoints'\n\nconst DebugMode = false\nconst intervalDuration = 1000\nconst dayTime = moment().format('A')\n\nconst getTimezone = () => {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone as string\n}\n\nconst SeparatorContainer = styled.span`\n  display: inline-block;\n`\n\nexport const TimeSegment = styled.span`\n  font-size: 8.1rem;\n  min-width: 11rem;\n  display: inline-block;\n  text-align: left;\n  ${breakpoints('font-size', 'rem', [{ 1200: 7.2 }, { 600: 3.0 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 9.6 }, { 600: 4.5 }])};\n`\n\nexport const ColonSegment = styled.span`\n  font-size: 5.4rem;\n  min-width: 3rem;\n  display: inline-block;\n  text-align: center;\n  ${breakpoints('font-size', 'rem', [{ 1200: 3.9 }, { 600: 2 }])};\n  ${breakpoints('min-width', 'rem', [{ 1200: 0.5 }, { 600: 0.5 }])};\n`\n\ninterface ClockProps {\n  hourFormat?: '12h' | '24h'\n  showSecond: boolean\n  family?: string\n  blinkSeparator?: boolean\n  digital?: ReactElement | null\n  separator?: ReactNode | null\n  tickHandler?: (second: number) => void | null\n}\n\nconst Clock: React.FC<ClockProps> = ({\n  hourFormat = '12h',\n  showSecond,\n  blinkSeparator = true,\n  digital: Digital = null,\n  separator = null,\n  tickHandler = null\n}) => {\n  const [time, setTime] = useState<string[]>([])\n  const [count, setCount] = useState(0)\n\n  const getFormat = () => {\n    const hourString = hourFormat === '12h' ? 'hh:mm' : 'kk:mm'\n    const secString = showSecond === true ? ':ss' : ''\n    return hourString + secString\n  }\n\n  useEffect(() => {\n    const updateInterval = () => {\n      const format = getFormat()\n      const timeString = moment().tz(getTimezone()).format(format)\n      const segments = timeString.split(':')\n      setTime(segments)\n      // count\n      setCount(value => value + 1)\n      if (tickHandler) tickHandler(count)\n    }\n    // display\n    updateInterval()\n    // update\n    const timer = setInterval(() => {\n      updateInterval()\n    }, intervalDuration)\n    return () => clearInterval(timer)\n  }, [showSecond, hourFormat])\n\n  const getSeparator = () => {\n    if (!blinkSeparator) {\n      return <ColonSegment>:</ColonSegment>\n    } else {\n      if (count % 2 === 0) {\n        return <ColonSegment>&nbsp;</ColonSegment>\n      } else {\n        return <ColonSegment>:</ColonSegment>\n      }\n    }\n  }\n\n  return (\n    <div>\n      {time.map((segment, index) => {\n        return (\n          <React.Fragment key={index}>\n            {index !== 0 && (\n              <SeparatorContainer>{getSeparator()}</SeparatorContainer>\n            )}\n            <TimeSegment>{segment}</TimeSegment>\n          </React.Fragment>\n        )\n      })}\n      {hourFormat === '12h' && <span>{dayTime}</span>}\n      {DebugMode && <div>count: {count}</div>}\n    </div>\n  )\n}\n\nexport default Clock\n","import { createGlobalStyle } from 'styled-components'\nimport styledNormalize from 'styled-normalize'\n\nconst GlobalStyle = createGlobalStyle`\n  ${styledNormalize}\n\n  body {\n    display: flex;\n    height: 100vh;\n  }\n  #root {\n    flex:1;\n  }\n`\nexport default GlobalStyle\n","import React, { useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\nimport GlobalStyle from './GlobalStyles'\n// eslint-disable-next-line no-unused-vars\n\ninterface ThemeContext {\n  currentTheme: string\n  setTheme: (themeName: string) => void\n}\nexport const CustomThemeContext = React.createContext<ThemeContext | null>(null)\n\ninterface CustomThemeProviderProps {\n  children: React.ReactNode\n  themes: any\n}\n\nconst CustomThemeProvider: React.FC<CustomThemeProviderProps> = ({\n  children,\n  themes\n}) => {\n  // Read current theme from localStorage or maybe from an api\n  const currentTheme = localStorage.getItem('appTheme') || 'dark'\n\n  // State to hold the selected theme name\n  const [themeName, _setThemeName] = useState(currentTheme)\n\n  // Retrieve the theme object by theme name\n  const theme = createMuiTheme(themes[themeName])\n\n  // Wrap _setThemeName to store new theme names in localStorage\n  const setThemeName = (name: string) => {\n    localStorage.setItem('appTheme', name)\n    _setThemeName(name)\n  }\n\n  const contextValue = {\n    currentTheme: themeName,\n    setTheme: setThemeName\n  }\n\n  return (\n    <CustomThemeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          {children}\n          <GlobalStyle />\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </CustomThemeContext.Provider>\n  )\n}\n\nexport default CustomThemeProvider\n","import React, { useContext } from 'react'\nimport Switch from '@material-ui/core/Switch'\nimport Box from '@material-ui/core/Box'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport { CustomThemeContext } from '../../theme/CustomThemeProvider'\n\nconst ThemeSelector = () => {\n  const context = useContext(CustomThemeContext)\n  if (context) {\n    const { currentTheme, setTheme } = context\n\n    const handleThemeChange = () => {\n      setTheme(currentTheme === 'light' ? 'dark' : 'light')\n    }\n\n    return (\n      <>\n        <Box>\n          <FormControlLabel\n            control={\n              <Switch\n                title={currentTheme}\n                checked={currentTheme === 'dark'}\n                onChange={handleThemeChange}\n              />\n            }\n            label=''\n          />\n        </Box>\n        <Box ml={5} display='flex' alignItems='center'>\n          {currentTheme}\n        </Box>\n      </>\n    )\n  }\n  return null\n}\n\nexport default ThemeSelector\n","import React, { useState, useEffect } from 'react'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Drawer, { DrawerProps } from '@material-ui/core/Drawer'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport IconButton from '@material-ui/core/IconButton'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport ThemeSelector from './ThemeSelector'\nimport { UserSettings } from '../../types/settings'\n\ninterface RightDrawerProps extends DrawerProps {\n  onClose: () => void\n  settings: UserSettings\n  onSettingUpdate: (setting: Object) => void\n}\nconst RightDrawer: React.FC<RightDrawerProps> = ({\n  onClose,\n  settings,\n  onSettingUpdate,\n  ...rest\n}) => {\n  const [timeFormat, setTimeFormat] = useState('24h')\n  const [showSecond, setShowSecond] = useState(true)\n  const [showDate, setShowDate] = useState(true)\n\n  useEffect(() => {\n    setTimeFormat(settings.timeFormat)\n    setShowSecond(settings.showSecond)\n  }, [settings])\n\n  const handleTimeFormatChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = (event.target as HTMLInputElement).value\n    setTimeFormat(value)\n    if (onSettingUpdate) onSettingUpdate({ timeFormat: value })\n  }\n\n  const handleShowSecondChange = (\n    evt: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    // console.log('checked', checked)\n    // console.log('evt', evt.target.value)\n    setShowSecond(checked)\n    onSettingUpdate({ showSecond: checked })\n  }\n\n  const handleShowDateChange = (\n    evt: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    setShowDate(checked)\n    onSettingUpdate({ showDate: checked })\n  }\n\n  return (\n    <Drawer anchor={'right'} {...rest}>\n      <Box p={3} display='flex' height='100vh' flexDirection='column'>\n        <Box\n          pl={3}\n          pr={3}\n          pt={3}\n          width='30vw'\n          display='flex'\n          flexDirection='row'\n          alignItems='center'\n          justifyContent='space-between'>\n          <Typography>\n            <strong>Silent Ticking</strong>\n          </Typography>\n          <IconButton onClick={onClose}>\n            <HighlightOffIcon color='primary' fontSize='large' />\n          </IconButton>\n        </Box>\n\n        <RadioGroup\n          aria-label='gender'\n          name='gender1'\n          value={timeFormat}\n          onChange={handleTimeFormatChange}>\n          <Box display='flex' p={3}>\n            <FormControlLabel value='12h' control={<Radio />} label='12H' />\n            <Box ml={5}>\n              <FormControlLabel value='24h' control={<Radio />} label='24H' />\n            </Box>\n          </Box>\n        </RadioGroup>\n        <Divider />\n\n        <Box display='flex' p={3}>\n          <FormControlLabel\n            control={\n              <Switch\n                title='second'\n                checked={showSecond}\n                onChange={handleShowSecondChange}\n              />\n            }\n            label=''\n          />\n          <Box ml={5} display='flex' alignItems='center'>\n            Show Second\n          </Box>\n        </Box>\n        <Divider />\n\n        <Box display='flex' p={3}>\n          <FormControlLabel\n            control={\n              <Switch\n                title='second'\n                checked={showDate}\n                onChange={handleShowDateChange}\n              />\n            }\n            label=''\n          />\n          <Box ml={5} display='flex' alignItems='center'>\n            Show Date\n          </Box>\n        </Box>\n        <Divider />\n\n        <Box display='flex' p={3}>\n          <ThemeSelector />\n        </Box>\n        <Divider />\n\n        <Box flex={1} />\n        <Box p={3} display='flex' flexDirection='row'>\n          <Box display='flex' flexDirection='column'>\n            <Typography>Designer</Typography>\n            <Typography>Jerry</Typography>\n          </Box>\n          <Box display='flex' ml={3} flexDirection='column'>\n            <Typography>Developer</Typography>\n            <Typography>Andy</Typography>\n          </Box>\n        </Box>\n        <Box p={3}>\n          <Typography>Copyright 2020</Typography>\n        </Box>\n      </Box>\n    </Drawer>\n  )\n}\n\nexport default RightDrawer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Moment from 'react-moment'\nimport { breakpoints } from '../utils/styledBreakpoints'\n\nconst Wrapper = styled.div`\n  font-size: 1.8rem;\n  min-width: 11rem;\n  display: inline-block;\n  text-align: left;\n  ${breakpoints('font-size', 'rem', [{ 1200: 1.2 }, { 600: 0.9 }])};\n`\ninterface DateDisplayProps {\n  format?: string\n}\nconst DateDisplay: React.FC<DateDisplayProps> = ({ format = 'DD/MM/YYYY' }) => {\n  const date = new Date()\n  return (\n    <Wrapper>\n      <Moment format={format}>{date}</Moment>\n    </Wrapper>\n  )\n}\n\nexport default DateDisplay\n","export interface SystemSettings {\n  appName: string\n  appDescription: string\n  appVersion: string\n}\n\nexport type TimeFormat = '12h' | '24h'\nexport type STTheme = 'dark' | 'light'\n\nexport interface UserSettings {\n  timeFormat: TimeFormat\n  showSecond: boolean\n  showDate: boolean\n  theme: STTheme\n  fontFamily: string\n  blinkSeparator: boolean\n}\n\nexport const DefaultUserSettings: UserSettings = {\n  timeFormat: '24h',\n  showSecond: true,\n  showDate: true,\n  theme: 'dark',\n  fontFamily: `'Major Mono Display', monospace`,\n  // fontFamily: 'Roboto',\n  // fontFamily: 'Montserrat',\n  blinkSeparator: true\n}\n","import React, { useState, useEffect } from 'react'\nimport Box from '@material-ui/core/Box'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport styled from 'styled-components'\nimport ClockKK from '../../components/Clock'\nimport RightDrawer from './RightDrawer'\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'\nimport Container from '@material-ui/core/Container'\nimport { Typography } from '@material-ui/core'\nimport DateDisplay from '../../components/DateDisplay'\nimport { UserSettings, DefaultUserSettings } from '../../types/settings'\nimport { settings } from 'cluster'\n\nconst Wrapper = styled(Container)`\n  display: flex;\n  background-color: ${props => props.theme.palette.background.default};\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`\n\nconst TopToolBar = styled.div`\n  width: 100%;\n  height: 20%;\n  top: 0;\n  position: absolute;\n  padding: 3rem;\n  display: flex;\n  flex-direction: row-reverse;\n`\n\nconst ToolButton = styled(IconButton)`\n  width: 42px;\n  height: 42px;\n  margin-left: 1.5rem;\n`\n\ninterface MainProps {\n  fullscreenHandler: any\n}\n\nconst Main: React.FC<MainProps> = ({ fullscreenHandler }) => {\n  const [openDraw, setOpenDraw] = useState(false)\n  const [userSettings, setUserSettings] = useState<UserSettings>(\n    DefaultUserSettings\n  )\n\n  const handleSettingsUpdate = (setting: Object) => {\n    const newSettings = { ...userSettings, ...setting }\n    setUserSettings(newSettings!)\n  }\n\n  const getMenuButton = () => {\n    if (!fullscreenHandler.active) {\n      return (\n        <ToolButton\n          onClick={() => {\n            setOpenDraw(true)\n          }}>\n          <MenuIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    }\n  }\n\n  const getFullscreenButton = () => {\n    if (fullscreenHandler.active) {\n      return (\n        <ToolButton onClick={fullscreenHandler.exit}>\n          <FullscreenExitIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    } else {\n      return (\n        <ToolButton onClick={fullscreenHandler.enter}>\n          <FullscreenIcon color='primary' fontSize='large' />\n        </ToolButton>\n      )\n    }\n  }\n\n  return (\n    <Wrapper maxWidth={false}>\n      <TopToolBar>\n        {getMenuButton()}\n        {getFullscreenButton()}\n      </TopToolBar>\n\n      <Box p={3} style={{ fontFamily: userSettings.fontFamily }}>\n        <Box textAlign='left' pl={2}>\n          {userSettings.showDate && <DateDisplay />}\n        </Box>\n        <ClockKK\n          hourFormat={userSettings.timeFormat}\n          showSecond={userSettings.showSecond}\n          blinkSeparator={userSettings.blinkSeparator}\n        />\n      </Box>\n\n      <RightDrawer\n        settings={userSettings}\n        open={openDraw}\n        onSettingUpdate={handleSettingsUpdate}\n        onClose={() => {\n          setOpenDraw(false)\n        }}\n      />\n    </Wrapper>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport styled from 'styled-components'\nimport Main from './pages/main/Main'\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen'\n\nconst Full = styled(FullScreen)`\n  width: 100%;\n  height: 100%;\n`\nfunction App() {\n  const handle = useFullScreenHandle()\n  return (\n    <>\n      <Full handle={handle}>\n        <Main fullscreenHandler={handle} />\n      </Full>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import createBreakpoints from '@material-ui/core/styles/createBreakpoints'\nimport createPalette from '@material-ui/core/styles/createPalette'\nimport createTypography from '@material-ui/core/styles/createTypography'\n\nexport const typography = createTypography(createPalette({}), {\n  fontFamily: [\n    'Montserrat',\n    '-apple-system',\n    'BlinkMacSystemFont',\n    '\"Segoe UI\"',\n    '\"Helvetica Neue\"',\n    'Arial',\n    'sans-serif'\n  ].join(','),\n  button: {\n    fontSize: '1.2rem'\n  },\n  h1: {\n    fontSize: '5.4rem'\n  },\n  h2: {\n    fontSize: '3.6rem'\n  },\n  h3: {\n    fontSize: '2.7rem'\n  },\n  h4: {\n    fontSize: '2.1rem'\n  },\n  h5: {\n    textAlign: 'left',\n    fontSize: '1.5rem'\n  },\n  h6: {\n    fontSize: '1.2rem'\n  },\n  body1: {\n    fontSize: '1rem'\n  },\n  subtitle1: {\n    fontSize: '0.9rem'\n  },\n  subtitle2: {\n    fontSize: '0.8rem'\n  },\n  caption: {\n    fontSize: '0.6rem'\n  }\n})\n\nfunction pxToRem(value: number) {\n  return `${value / 16}rem`\n}\n\n// Generate breakpoints so we can use them in the theme definition\nconst breakpoints = createBreakpoints({})\n\nexport const overrideTypography = {\n  h1: {\n    fontSize: pxToRem(52), // < md\n    [breakpoints.up('sm')]: {\n      fontSize: pxToRem(78) // >md\n    },\n    [breakpoints.up('md')]: {\n      fontSize: pxToRem(120) // >md\n    }\n  },\n  h3: {\n    fontSize: pxToRem(15),\n    [breakpoints.up('md')]: {\n      fontSize: pxToRem(18)\n    }\n  }\n}\n","import dark from './dark.json'\nimport light from './light.json'\nimport { overrideTypography, typography } from './typography'\n\nconst darkObj = {\n  ...dark,\n  typography,\n  overrides: {\n    MuiTypography: overrideTypography\n  }\n}\n\nconst lightObj = {\n  ...light,\n  typography,\n  overrides: {\n    MuiTypography: overrideTypography\n  }\n}\n\nexport const themes = { light: lightObj, dark: darkObj }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport CustomThemeProvider from './theme/CustomThemeProvider'\n\nimport { themes } from './theme/themes'\n\nReactDOM.render(\n  <CustomThemeProvider themes={themes}>\n    <App />\n  </CustomThemeProvider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}